"""
Django settings for languagetutor project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# Load OpenAI API Key
OPENAI_API_KEY = config('OPENAI_API_KEY')

#SECURITY SETTINGS

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Only enable these settings in production
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_EXPIRE_AT_BROWSER_CLOSE = True
    CSRF_COOKIE_HTTPONLY = True

#Session and cookie settings
SESSION_COOKIE_SECURE = True  # Ensures the session cookie is only sent over HTTPS
CSRF_COOKIE_SECURE = True     # Ensures the CSRF cookie is only sent over HTTPS
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Session expires when the browser is closed
CSRF_COOKIE_HTTPONLY = True   # Prevent CSRF cookie from being accessed by JavaScript

#Define when moving to production
ALLOWED_HOSTS = []

#Security middleware
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'  # Prevent embedding your site in iframes

# Authentication settings
LOGIN_URL = "/login/"  # URL to redirect to for login
LOGIN_REDIRECT_URL = "/chat/"  # Default redirect after successful login
LOGOUT_REDIRECT_URL = "/login/"  # Redirect after logout

# Axes settings 
AXES_FAILURE_LIMIT = 3  # Limit of failed attempts before lockout
AXES_COOLOFF_TIME = timedelta(seconds=120)  # Time in minutes before user can attempt again after lockout
AXES_LOCKOUT_URL = '/login/lockout/'
AXES_LOCKOUT_TEMPLATE = 'login/lockout.html'  # Template to show on lockout
# Enforce user-based lockouts only
AXES_USERNAME_FORM_FIELD = 'username'  # Field to track user login attempts
AXES_FAILURE_LIMIT_PER_IP = False  # Disable IP-based lockouts
AXES_FAILURE_LIMIT_PER_USER_AND_IP = False  # Disable user-and-IP-based lockouts
AXES_FAILURE_LIMIT_PER_USER = True  # Enforce failure limit on a per-user basis

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # Default backend
    'axes.backends.AxesStandaloneBackend',        # Add this line
)



# Application definition
INSTALLED_APPS = [
    'chat',
    'landing',
    'registration',
    'login',
    'core',
    'axes',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware',
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

ROOT_URLCONF = 'languagetutor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'languagetutor.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#Custom configuration to handle error logs

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "db_handler": {
            "level": "ERROR",
            "class": "languagetutor.logging.DBLogHandler",  # Adjusted the path
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "db_handler"],  # Include the DB handler
            "propagate": True,
        },
        "django.request": {
            "handlers": ["db_handler"],  # Only log to the DB
            "level": "ERROR",
            "propagate": False,
        },
        "languagetutor.custom": {  # Custom logger with DB handler
            "handlers": ["console", "db_handler"],
            "level": "INFO",
        },
    },
}


ADMINS = [
    ('Kerstin Bachmann', 'languagetutorAPP@web.de')
]

# Email backend configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.web.de'  #
EMAIL_PORT = 587  
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'languagetutorAPP@web.de'
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_USE_LOCALTIME = True
EMAIL_TIMEOUT = 10
DEFAULT_FROM_EMAIL = 'languagetutorAPP@web.de'  